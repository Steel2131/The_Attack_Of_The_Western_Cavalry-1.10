#textdomain wesnoth-taotwc

#define NOT FILTER
    [not]
        {FILTER}
    [/not]
#enddef


#define DEFEAT
    [endlevel]
        side=1
        result=defeat
    [/endlevel]
#enddef


#define VICTORY
    [endlevel]
        side=1
        result=victory
    [/endlevel]
#enddef

#define VICTORY_NEXT SCENARIO
    [endlevel]
        side=1
        result=victory
        next_scenario={SCENARIO} 
    [/endlevel]
#enddef

#define ADD_GOLD SIDE AMOUNT
    [gold]
        side={SIDE}
        amount={AMOUNT}
    [/gold]
#enddef


#define DELETE_SIDE_GOLD SIDE
    # Note that this macro removes the gold permanently, later you can't refer to this value!
    [store_gold]
        side={SIDE}
        variable=side_storedgold
    [/store_gold]
    [if]
        [variable]
            name=side_storedgold
            greater_than=0
        [/variable]
        [then]
            [gold]
                side={SIDE}
                amount=-$side_storedgold
            [/gold]
        [/then]
    [/if]

    {CLEAR_VARIABLE side_storedgold}
#enddef

#define DELAY TIME
    [delay]
        time={TIME}
    [/delay]
#enddef


#define SCROLL_TO X Y
    [scroll_to]
        x={X}
        y={Y}
    [/scroll_to]
#enddef

#define STORE_UNIT FILTER VAR KILL
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        kill={KILL}
        variable={VAR}
    [/store_unit]
#enddef


#define HARM_UNIT FILTER VALUE
    # Macro to harm a unit
    # Healing isn't possible. Always give positive values.
    # Example: {HARM_UNIT id=Bob 12}

    {STORE_UNIT {FILTER} units_to_harm yes}

    {FOREACH units_to_harm UNIT_HARMED_i}
        {VARIABLE_OP units_to_harm[$UNIT_HARMED_i].hitpoints add -{VALUE}}

        [if]
            [variable]
                name=units_to_harm[$UNIT_HARMED_i].hitpoints
                less_than=1
            [/variable]
            [then]
                [kill]
                    find_in=units_to_harm[$UNIT_HARMED_i]
                    animate=yes
                    fire_event=yes
                [/kill]
            [/then]
            [else]
                [unstore_unit]
                    variable=units_to_harm[$UNIT_HARMED_i]
                [/unstore_unit]
            [/else]
        [/if]

    {NEXT UNIT_HARMED_i}

    {CLEAR_VARIABLE units_to_harm}
#enddef



#define PETRIFY_UNIT FILTER
    {MODIFY_UNIT {FILTER} status.petrified yes}
#enddef
#define UNPETRIFY_UNIT FILTER
    {MODIFY_UNIT {FILTER} status.petrified no}
#enddef

#define POISON_UNIT FILTER
    {MODIFY_UNIT {FILTER} status.poisoned yes}
#enddef
#define UNPOISON_UNIT FILTER
    {MODIFY_UNIT {FILTER} status.poisoned no}
#enddef




#define ADD_TRAIT FILTER TRAIT
        # Thanks for boru and Anonymissimus for the help!
        # Note that this macro doesn't affect the hitpoints and moves values, 
        # so they can be decreased or increased. Depends on the unit.
        [store_unit]
            [filter]
                {FILTER}
            [/filter]

            kill=yes
            variable=trait_stored
        [/store_unit]

        [set_variables]
            name=existing_traits.trait
            to_variable=trait_stored.modifications.trait
        [/set_variables]

        [set_variables]
            name=new_traits

            [value]
                {{TRAIT}}
            [/value]
        [/set_variables]

        [set_variables]
            name=trait_stored.modifications.trait

            [insert_tag]
                name=value
                variable=new_traits.trait
            [/insert_tag]
            [insert_tag]
                name=value
                variable=existing_traits.trait
            [/insert_tag]
        [/set_variables]

        {VARIABLE experience_temp $trait_stored.experience}
        {VARIABLE trait_stored.advances_to $trait_stored.type}
        {VARIABLE trait_stored.experience $trait_stored.max_experience}

        [unstore_unit]
            variable=trait_stored
            find_vacant=no
        [/unstore_unit]

        {MODIFY_UNIT {FILTER} experience $experience_temp} 

        {CLEAR_VARIABLE new_traits,existing_traits,trait_stored}
#enddef


#define ADD_NEW_TRAIT FILTER TRAIT
        # Thanks for boru and Anonymissimus for the help!
        # Note that this macro sets every value to it's maximum!
        [store_unit]
            [filter]
                {FILTER}
            [/filter]

            kill=yes
            variable=trait_stored
        [/store_unit]

        [set_variables]
            name=existing_traits.trait
            to_variable=trait_stored.modifications.trait
        [/set_variables]

        [set_variables]
            name=new_traits

            [value]
                {{TRAIT}}
            [/value]
        [/set_variables]

        [set_variables]
            name=trait_stored.modifications.trait

            [insert_tag]
                name=value
                variable=new_traits.trait
            [/insert_tag]
            [insert_tag]
                name=value
                variable=existing_traits.trait
            [/insert_tag]
        [/set_variables]

        {VARIABLE experience_temp $trait_stored.experience}
        {VARIABLE trait_stored.advances_to $trait_stored.type}
        {VARIABLE trait_stored.experience $trait_stored.max_experience}

        [unstore_unit]
            variable=trait_stored
            find_vacant=no
        [/unstore_unit]

        {MODIFY_UNIT {FILTER} experience $experience_temp} 
        {FULL_HEAL {FILTER}}

        [store_unit]
            [filter]
                {FILTER}
            [/filter]
            
            kill=no
            variable=moves_stored
        [/store_unit]

        {MODIFY_UNIT {FILTER} moves $moves_stored.max_moves}

        {CLEAR_VARIABLE new_traits,existing_traits,trait_stored,moves_stored}
#enddef


#define REMOVE_TRAIT FILTER REMAINING_TRAIT
        # Note that this macro sets every value to it's maximum!
        # Note that the trait you give is the remaining, not the deleting one!
        [store_unit]
            [filter]
                {FILTER}
            [/filter]

            kill=yes
            variable=trait_stored
        [/store_unit]

        [set_variables]
            name=existing_traits.trait
            to_variable=trait_stored.modifications.trait
        [/set_variables]

        [set_variables]
            name=new_traits

            [value]
                {{REMAINING_TRAIT}}
            [/value]
        [/set_variables]

        [set_variables]
            name=trait_stored.modifications.trait

            [insert_tag]
                name=value
                variable=new_traits.trait
            [/insert_tag]
        [/set_variables]

        {VARIABLE experience_temp $trait_stored.experience}
        {VARIABLE trait_stored.advances_to $trait_stored.type}
        {VARIABLE trait_stored.experience $trait_stored.max_experience}

        [unstore_unit]
            variable=trait_stored
            find_vacant=no
        [/unstore_unit]

        {MODIFY_UNIT {FILTER} experience $experience_temp} 
        {FULL_HEAL {FILTER}}

        [store_unit]
            [filter]
                {FILTER}
            [/filter]
            
            kill=no
            variable=moves_stored
        [/store_unit]

        {MODIFY_UNIT {FILTER} moves $moves_stored.max_moves}

        {CLEAR_VARIABLE new_traits,existing_traits,trait_stored,moves_stored}
#enddef




###########
##REDRAWS##
###########

#define REDRAW
    [redraw]
    [/redraw]
#enddef

#define REDRAW_SIDE SIDE
    [redraw]
        side={SIDE}
    [/redraw]
#enddef

#define REDRAW_SIDES SIDES

    [set_variable]
        name=to_redraw
        value={SIDES}
    [/set_variable]

    [while]
        [variable]
            name=to_redraw
            greater_than=0
        [/variable]
        [do]

            {REDRAW_SIDE $to_redraw}
            {VARIABLE_OP to_redraw add -1}

        [/do]
    [/while]

    {CLEAR_VARIABLE to_redraw}
#enddef

######################

#define IFDEF_EASY WML
#ifdef EASY
    {WML}
#endif
#enddef

#define IFDEF_HARD WML
#ifdef HARD
    {WML}
#endif
#enddef

#define 0
#
#enddef

#define ALLOW_RECRUIT SIDE TYPE
	[allow_recruit]
		side={SIDE}
		type={TYPE}
	[/allow_recruit]
#enddef
#define DISALLOW_RECRUIT SIDE TYPE
	[disallow_recruit]
		side={SIDE}
		type={TYPE}
	[/disallow_recruit]
#enddef
	



# This was written to avoid WML bloats while modifying units.
# But be careful, don't leave out anything!
#
# Example to learn the syntax:
## {MODIFY_UNIT_VALUES (type=Elvish Fighter)}
##     {UNIT_VALUE side 3}
##     {UNIT_VALUE profile portraits/my_elvish.png}
##     {UNIT_VALUE upkeep loyal}
##     {UNIT_VALUE overlays misc/loyal-icon.png}
##     # Modify as many as you want...
## {END_MODIFYING}

#define MODIFY_UNIT_VALUES FILTER
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        variable=MODIFY_UNIT_VALUES_store
        kill=yes
    [/store_unit]

    {FOREACH MODIFY_UNIT_VALUES_store i}
#enddef
#define UNIT_VALUE VAR VALUE
        [set_variable]
            name=MODIFY_UNIT_VALUES_store[$i].{VAR}
            value={VALUE}
        [/set_variable]
#enddef
#define END_MODIFYING
        [unstore_unit]
            variable=MODIFY_UNIT_VALUES_store[$i]
            find_vacant=no
        [/unstore_unit]
        {NEXT i}
        {CLEAR_VARIABLE MODIFY_UNIT_VALUES_store}
#enddef



#define CLEAR_VARIABLES_AT_END VARIABLES
    [event]
        name=victory
        {CLEAR_VARIABLE {VARIABLES}}
    [/event]
#enddef


#define GAME_LUCK_IS EQUALS
    # EQUALS can be: hard normal easy
    [variable]
        name=how_lucky_is_the_game
        equals={EQUALS}
    [/variable]
#enddef
#define GAME_LUCK_DEPENDENCE ACTION1 ACTION2 ACTION3
    [if]
        {GAME_LUCK_IS hard}
        [then]
            {ACTION1}
        [/then]
    [/if]
    [if]
        {GAME_LUCK_IS normal}
        [then]
            {ACTION2}
        [/then]
    [/if]
    [if]
        {GAME_LUCK_IS easy}
        [then]
            {ACTION3}
        [/then]
    [/if]
#enddef

#define RANDOM_VARIABLE VARIABLE_NAME VALUES 
	[set_variable]
		name={VARIABLE_NAME}
		rand={VALUES}
	[/set_variable]
#enddef



#define BLOODY_BATTLEFIELD X_RANGE Y_RANGE
		[store_locations]
			x,y={X_RANGE},{Y_RANGE}
			variable=massacre
		[/store_locations]
		{FOREACH massacre i}
			{RANDOM 1..7}
			[switch]
				variable=random
				[case]
					value=1
					{RANDOM_VARIABLE (corpse_posses) (blood,blood,blood,blood,bones,bones,bonestack,burial,Lieutenant-dead,Spearman-dead,Thief-dead,Trapper-dead,archer-die-13)}
					[switch]
						variable=corpse_posses
						[case]
							value=blood,bones,bonestack,burial
							{RANDOM_VARIABLE opposite_c 1..2}
							[switch]
								variable=opposite_c
								[case]
									value=1
									[item]
										x,y=$massacre[$i].x,$massacre[$i].y
										image="deads/neutral/$corpse_posses|.png"
									[/item]
								[/case]
								[case]
									value=2
									[item]
										x,y=$massacre[$i].x,$massacre[$i].y
										image="deads/neutral/$corpse_posses|.png~FL()"
									[/item]
								[/case]	
							[/switch]
						[/case]		
						[case]
							value=Lieutenant-dead,Spearman-dead,Thief-dead,Trapper-dead
							{RANDOM_VARIABLE opposite_c 1..2}
							[switch]
								variable=opposite_c
								[case]
									value=1
									[item]
										x,y=$massacre[$i].x,$massacre[$i].y
										image="deads/humans/$corpse_posses|.png"
									[/item]
								[/case]
								[case]
									value=2
									[item]
										x,y=$massacre[$i].x,$massacre[$i].y
										image="deads/humans/$corpse_posses|.png~FL()"
									[/item]
								[/case]	
							[/switch]
						[/case]		
						[case]
							value=archer-die-13
							{RANDOM_VARIABLE opposite_c 1..2}
							[switch]
								variable=opposite_c
								[case]
									value=1
									[item]
										x,y=$massacre[$i].x,$massacre[$i].y
										image="deads/undead/$corpse_posses|.png"
									[/item]
								[/case]
								[case]
									value=2
									[item]
										x,y=$massacre[$i].x,$massacre[$i].y
										image="deads/undead/$corpse_posses|.png~FL()"
									[/item]
								[/case]	
							[/switch]
						[/case]		
					[/switch]					
				[/case]
			[/switch]
		{NEXT i}
#enddef








